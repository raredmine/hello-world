#!/usr/bin/perl -w
use strict;
use 5.010;

#### Global Variable declare #####
my ($ip, $sub_mask, $octet, $num, $m, $d, $bit, $last_mask, $min, $max, $new, $broadcast, $network);
my ($frst, $scnd, $thrd, $frth, $fifth, $first, $last, $first_ip, $last_ip, $net, $bcast, $bit_ad); 
#### End of Variable declare #####

say "Input the Network address (Host or Network)";
$ip =<STDIN>;

$m =  '(\d+)\.'; ### Abbreviated the Matched digit with dotted.
$d = '(\d+)'; ### Abbreviated Matched digit only.

if ($ip =~ m/$m$m$m$d\/$d/) {
	 $num = $5 / 8; ##### To get the subnet mask bites, divide the network prefix to 8.
	($frst, $scnd, $thrd, $frth, $fifth) = ($1, $2, $3, $4, $5); ##### Assigned the list of matched Octet to the Octet Variable.
	 if ($5 <= 30) { ##### Conditional for Network Prefix less than or equal 30.
		if ( $num =~ /$m$d/ ) { ##### Match the digit to separate the decimal to decimal point.
			if ( $1 > 3){ $octet = $num;} else{ $octet = $1;}
			if ( $2 == 875 ) { octet_(2);}
			if ( $2 == 75 ) { octet_(4);}
			if ( $2 == 625 ) { octet_(8);}
			if ( $2 == 5 ) { octet_(16);}
			if ( $2 == 375 ) { octet_(32);}
                        if ( $2 == 25 ) { octet_(64);}
                        if ( $2 == 125 ) { octet_(128);}
		}elsif ( $num =~ /$d/ ) {
			$octet = $1;
			octet_(0);
		}
		print "Network: $network\/$fifth\nFirst usable IP: $first_ip\nLast usable IP: $last_ip\nBroadcast: $broadcast\nSubnet Mask: $sub_mask\n";
	}elsif ($5 > 30) {	
		print "Your prefix is greater than 30, please try again.";	
	}

}elsif ($ip =~ m/$m$m$m$d/) {
	say "Input the Subnet Mask (e.g. 255.255.255.0)";
	$sub_mask =<STDIN>;
}
else {
	print "Error";
}


sub octet_ {
	$bit=$_[0];
if ($octet == 0) {
	total($frst,$bit);
        $first_ip = "$net.0.0.1";
        $last_ip = "$bcast.255.255.254";
        $broadcast = "$bcast.255.255.255";
	$sub_mask = "$last_mask.0.0.0";
        $network = "$net.0.0.0";
}
elsif ($octet == 1) { 
	total($scnd,$bit);
	$first_ip = "$frst.$net.0.1";
	$last_ip = "$frst.$bcast.255.254";
	$broadcast = "$frst.$bcast.255.255";
	$sub_mask = "255.$last_mask.0.0";
	$network = "$frst.$net.0.0";
}
elsif ($octet == 2) {
	total($thrd,$bit);
	$first_ip = "$frst.$scnd.$net.1";
	$last_ip = "$frst.$scnd.$bcast.254";
	$broadcast = "$frst.$scnd.$bcast.255";
	$sub_mask = "255.255.$last_mask.0";
	$network = "$frst.$scnd.$net.0";
}
elsif ($octet == 3) { 
	total($frth,$bit);
	$first_ip = "$frst.$scnd.$thrd.$first";
	$last_ip = "$frst.$scnd.$thrd.$last";
	$broadcast = "$frst.$scnd.$thrd.$bcast";
	$sub_mask = "255.255.255.$last_mask";
	$network = "$frst.$scnd.$thrd.$net";
}
else { $sub_mask = "";}
}
sub total {
	
	$bit_ad = $bit;
	
	if ($bit == 0) { ##### Fix length Subnet Masking - e.g. Class A, B and C 
		if ($octet == 3) { ##### For last Octet of IP Address. 
			$first = 1;
			$last = 254;
		}else {	##### For First Octet to third Octet of IP Address.
			$first = 0;
		}
		$bcast = 255;
		$net = 0;
		$last_mask = 0;
	}else{	##### Variable Length Subnet Masking - Modify the Prefix Length based on the subnets and Hosts requirement.
		if ($_[0] < $bit) {  ##### If last Octet of Network is less than Subnet mask in bites.
                        $net = $bit - $bit_ad;
                        $bcast = $bit_ad - 1;
			$first = $net + 1;
			$last = $bcast - 1;
			$last_mask = 256 - $bit;
		}elsif ($_[0] % $bit == 0 || $bit % $_[0] == 0) { ##### if last Octet of Network is divisible by Subnet mask in bites or vice versa.  
			$net = $_[0];
			$first = $net + 1;
			$bcast = $_[0] + $bit - 1;
			$last = $bcast - 1;
			$last_mask = 256 - $bit;
		}else { ##### Other Condition will be use with while to continue increase of bites.
                        while($_[0] > $bit) { ##### Used While loop to get the value of last Octet for Network.
                                $bit += $bit_ad;
                                $net = $bit - $bit_ad;
				$bcast = $bit - 1;
				$last_mask = 256 - $bit_ad;
                        }
                }
	}
}

## Copyright (C) 2017 by Rodrigo D. Adolfo Jr.
